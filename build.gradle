plugins {
	id 'java'
	id 'pl.allegro.tech.build.axion-release' version '1.2.4'
	id 'maven-publish'
	id 'com.jfrog.bintray' version '1.2'
	id 'findbugs'
	id 'com.github.johnrengelman.shadow' version '1.2.1'
	id 'org.hidetake.ssh' version '1.1.3'
	id "com.monochromeroad.s3sync" version "0.8"
}

import com.monochromeroad.gradle.plugin.aws.s3.S3Sync

configurations.all {
	resolutionStrategy {
		cacheDynamicVersionsFor 60, 'minutes'
		cacheChangingModulesFor 60, 'minutes'

		eachDependency { DependencyResolveDetails details ->
			if (details.requested.group == 'javax.ws.rs') {
				details.useTarget group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '+'
	      	}
		}
	}
}

scmVersion {
    tag {
        prefix = project.name
    }

	repository {
        customUsername = "$System.env.AXION_RELEASE_GITHUB_TOKEN"
        customPassword = ""
    }

	versionCreator 'versionWithBranch'

    hooks {
        pre 'fileUpdate', [file: 'README.md', pattern: {v,p -> /$project.name:\d+.\d+.\d+/}, replacement: {v, p -> "$project.name:$v"}]
        pre 'commit'
    }
}

project.group = 'com.fabahaba'
project.version = scmVersion.version

sourceCompatibility = 1.8

repositories {
	maven { url  "http://dl.bintray.com/jamespedwards42/libs" }
    jcenter()
    maven { url "http://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "http://repo.marketcetera.org/maven" }
}

dependencies {
	compile 'com.fabahaba:fava:+'
	compile 'com.fabahaba:byobuckets:+'
	compile 'com.fabahaba:runscope-java-client:+'
	compile 'ch.qos.logback:logback-classic:+'

	// DATABASE
	compile 'com.fabahaba:jedipus:+'

	compile ('com.fabahaba:simple-kafka:+') {
		exclude group: 'org.eclipse.jetty'
	}

	compile 'com.palominolabs.metrics:metrics-new-relic:+'

   	// XCHANGE
	compile 'com.github.mmazi:rescu:+'
	compile group: "com.xeiam.xchange", name: "xchange-core", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-anx", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-bitcurex", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-bitfinex", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-bitstamp", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-bittrex", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-btcchina", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-btce", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-bter", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-campbx", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-cexio", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-coinbase", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-cryptonit", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-cryptsy", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-hitbtc", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-itbit", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-kraken", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-lakebtc", version: "+", changing: true
	compile group: "com.xeiam.xchange", name: "xchange-poloniex", version: "+", changing: true

   testCompile 'junit:junit:+'
}

jar {
	// [baseName]-[appendix]-[version]-[classifier].[extension]
	baseName project.name
	appendix ''
	version project.version
	classifier ''
	extension 'jar'
	manifest {
		attributes 'Main-Class': 'com.fabahaba.fava.service.ServiceRunner'
	}
	zip64 = true
}

shadowJar {
	mergeServiceFiles()
	exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA, LICENSE'
}

task sourcesJar(type: Jar, dependsOn: classes) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	from javadoc.destinationDir
	classifier 'javadoc'
}

publishing {
	publications {
		mavenJava( MavenPublication ) {
			from components.java

			artifact sourcesJar
			artifact javadocJar
        }
    }
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

bintray {
	user = "$System.env.BINTRAY_USER"
    key = "$System.env.BINTRAY_API_KEY"

    publications = ['mavenJava']

    pkg {
        repo = 'libs'
        name = project.name
        desc = ''
        websiteUrl = 'https://github.com/jamespedwards42/' + project.name
        vcsUrl = 'https://github.com/jamespedwards42/' + project.name
        issueTrackerUrl = 'https://github.com/jamespedwards42/' + project.name + '/issues'
        licenses = ["Apache-2.0"]
        publish = true
        version {
            name = project.version
            //desc =  ''
            vcsTag = scmVersion.tag.prefix + '-' + project.version
            gpg {
                sign = true
                passphrase = "$System.env.BINTRAY_GPG_PASSPHRASE"
            }
        }
    }
}

bintrayUpload.onlyIf { !project.version.endsWith( 'SNAPSHOT' ) }

findbugs {
	toolVersion = "+"
	reportsDir = file("$project.buildDir/findbugsReports")
    effort = "max"
    reportLevel = "medium"
    ignoreFailures = false
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task deleteSecrets(type: Delete) {
  delete fileTree(dir: "secrets")
}

task syncSecrets(type: S3Sync, dependsOn: deleteSecrets) {
    accessKey = "$System.env.S3_MARKETSTEM_KEY"
    secretKey = "$System.env.S3_MARKETSTEM_SECRET"

    configFile "synchronizer.properties"

    action = 'DOWN'

    from "marketstem/repo-secrets"
    into "secrets"
}

task deploy(dependsOn: syncSecrets) << {
	file("secrets/servers.txt").eachLine{ line ->
		def serverInfoParts = line.split(":")
		def serverName = serverInfoParts[0]
		def serverHost = serverInfoParts[1]
		remotes.create(serverName) {
		    role(project.name)
		    host = serverHost
		    user = 'root'
		    identity = file('secrets/marketstem_id_rsa')
		    knownHosts = allowAnyHosts
		}
	}

	ssh.run {
		session(remotes.role(project.name)) {
			execute 'curl http://localhost:8081/deployment/redeploy'
			execute '/bin/bash -i -c "~/git/marketstem/scripts/buildrun.sh"'
			execute 'apt-get -y update; apt-get -y install; apt-get -y upgrade'
			execute 'while [ $(curl -I --write-out %{http_code} --silent --output /dev/null localhost:8081/deployment/is_healthy) -ne 200 ] ; do sleep 1; done'
		}
	}
}

deploy.onlyIf { !project.version.endsWith( 'SNAPSHOT' ) }

task downloadNewrelicAgent(type: S3Sync) {
    accessKey = "$System.env.S3_MARKETSTEM_KEY"
    secretKey = "$System.env.S3_MARKETSTEM_SECRET"

    configFile "synchronizer.properties"

    action = 'DOWN'

    from "marketstem/newrelic"
    into "newrelic"
}